# kubectl create secret generic kuard-config --from-literal=test=mojesuprhaslo --from-literal=test2="demo 1234" --dry-run=client -o yaml
apiVersion: v1
kind: Secret
metadata:
  name: kuard-config
data:
  test: bW9qZXN1cHJoYXNsbw==
  test2: ZGVtbyAxMjM0
---
apiVersion: v1
kind: Secret
metadata:
  name: appsettings
data:
  appsettings.json: ewogICAgIkxvZ2dpbmciOiB7CiAgICAgICAgIkxvZ0xldmVsIjogewogICAgICAgICAgICAiRGVmYXVsdCI6ICJJbmZvcm1hdGlvbiIsCiAgICAgICAgICAgICJNaWNyb3NvZnQuQXNwTmV0Q29yZSI6ICJXYXJuaW5nIgogICAgICAgIH0KICAgIH0sCiAgICAiQWxsb3dlZEhvc3RzIjogIioiCn0=
---
apiVersion: v1
kind: Pod
metadata:
  name: kuard
  labels:
    name: kuard
spec:
  containers:
  - name: kuard
    image: gcr.io/kuar-demo/kuard-amd64:1
    resources: {}
    volumeMounts:
      - mountPath: /app/
        name: config
    env:
      - name: demo_secret
        valueFrom:
# kubectl create secret generic kuard-config --from-literal=test=mojesuprhaslo --from-literal=test2="demo 1234"
# tylko jak nie da sie inaczej
          secretKeyRef:
            key: test
            name: kuard-config
  volumes:
    - name: config
# zalecana
# kubectl create secret generic appsettings --from-file=appsettings.json -o yaml --dry-run=client | kubectl apply -f -
      secret:
        secretName: appsettings
